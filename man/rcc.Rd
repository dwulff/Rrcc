% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rcc.R
\name{rcc}
\alias{rcc}
\title{Robust continuous clustering}
\usage{
rcc(
  data,
  k = 10,
  measure = c("euclidean", "cosine"),
  clustering_threshold = 1.1,
  eps = 1e-05,
  verbose = FALSE,
  conda = NULL
)
}
\arguments{
\item{data}{\code{data.frame} or \code{numeric} \code{matrix} containing the to-be-clustered objects. Columns must repreent the features, rows the objects. When a \code{data.frame} is provided all columns must be of type \code{numeric}.}

\item{k}{number of nearest neighbors of each object used in constructing the knn-graph.}

\item{measure}{distance metric. Can be \code{"euclidean"} or \code{"cosine"} to assess distance based on Euclidean distance of cosine similarity.}

\item{clustering_threshold}{controls how agressively to assign points to clusters. Higher numbers result in fewer larger clusters.}

\item{eps}{numerical epsilon used for computation. Defaults to \code{1e-05}.}

\item{verbose}{logical controlling the presentation of optimization statistics.}

\item{conda}{name of an existing conda environment. If \code{NULL} (the default) the function will either use the currently active environment or create and activate a new one.}
}
\value{
\code{rcc} returns an integer vector of length \code{nrow(data)} containing the cluster assignments.
}
\description{
\code{rcc} runs the robust continuous clustering algorithm by Shah and Koltun (2017) to group objects into an appropriate number of clusters.
}
\details{
\code{rcc} is a wrapper around the Python \code{pyrcc} implementation by Yann Henon (\href{https://github.com/yhenon/pyrcc}{github.com/yhenon/pyrcc}).

\code{rcc} depends on the python libraries, numpy and scipy. To run the \code{rcc} function, the dependencies must be made available within a conda environment. If a conda environment is active, it wil be used. Alternatively, a conda environment name can be supplied via the \code{conda} argument or a new environment can be created and activated by the function.
}
\examples{
# numeric variables in iris
iris_numerics = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")

# run rcc
clusters <- rcc(iris[,iris_numerics])

}
\references{
Shah, S. A., & Koltun, V. (2017). Robust continuous clustering. Proceedings of the National Academy of Sciences, 114(37), 9814-9819.#' @examples
}
